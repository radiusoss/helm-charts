# Licensed to Datalayer (http://datalayer.io) under one or more
# contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. Datalayer licenses this file
# to you under the Apache License, Version 2.0 (the 
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: spark-k8s-resource-staging-server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spark-k8s-resource-staging-server
        kuber: spark-k8s
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        spark-k8s-resource-staging-server-instance: default
    spec:
      volumes:
        - name: spark-k8s-resource-staging-server-config
          configMap:
            name: spark-k8s-resource-staging-server-config
      containers:
        - name: spark-k8s-resource-staging-server
          image: datalayer/spark-k8s-resource-staging-server:2.2.0-0.5.0
          imagePullPolicy: {{ .Values.spark.imagePullPolicy }}
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 100m
              memory: 1Gi
          volumeMounts:
            - name: spark-k8s-resource-staging-server-config
              mountPath: '/etc/spark-k8s-resource-staging-server'
          args:
            - '/etc/spark-k8s-resource-staging-server/spark-k8s-resource-staging-server.properties'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-k8s-resource-staging-server-config
data:
  spark-k8s-resource-staging-server.properties: |
    spark.kubernetes.resourceStagingServer.port=10000
    spark.ssl.kubernetes.resourceStagingServer.enabled=false
# Other possible properties are listed below, primarily for setting up TLS. The paths given by KeyStore, password, and PEM files here should correspond to
# files that are securely mounted into the resource staging server container, via e.g. secret volumes.
#   spark.ssl.kubernetes.resourceStagingServer.keyStore=/mnt/secrets/resource-staging-server/keyStore.jks
#   spark.ssl.kubernetes.resourceStagingServer.keyStorePassword=changeit
#   spark.ssl.kubernetes.resourceStagingServer.keyPassword=changeit
#   spark.ssl.kubernetes.resourceStagingServer.keyStorePasswordFile=/mnt/secrets/resource-staging-server/keystore-password.txt
#   spark.ssl.kubernetes.resourceStagingServer.keyPasswordFile=/mnt/secrets/resource-staging-server/keystore-key-password.txt
#   spark.ssl.kubernetes.resourceStagingServer.keyPem=/mnt/secrets/resource-staging-server/key.pem
#   spark.ssl.kubernetes.resourceStagingServer.serverCertPem=/mnt/secrets/resource-staging-server/cert.pem
---
apiVersion: v1
kind: Service
metadata:
  name: spark-k8s-resource-staging-service
spec:
  type: NodePort
  selector:
    spark-k8s-resource-staging-server-instance: default
  ports:
    - protocol: TCP
      port: 10000
      targetPort: 10000
      nodePort: 31000
